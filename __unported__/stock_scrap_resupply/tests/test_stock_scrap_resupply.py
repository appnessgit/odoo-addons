# -*- coding: utf8 -*-
#
# Copyright (C) 2014 NDP Syst√®mes (<http://www.ndp-systemes.fr>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from openerp.tests import common


class TestStockScrapResupply(common.TransactionCase):

    def setUp(self):
        super(TestStockScrapResupply, self).setUp()
        self.product_a1232 = self.browse_ref("product.product_product_6")
        self.location_shelf = self.browse_ref("stock.stock_location_components")
        self.location_1 = self.browse_ref("stock_scrap_resupply.stock_location_a")
        self.location_2 = self.browse_ref("stock_scrap_resupply.stock_location_b")
        self.uom_unit_id = self.ref("product.product_uom_unit")
        self.picking_type_id = self.ref("stock.picking_type_internal")

    def run_procs(self, move):
        """Runs procurements generated by move."""
        procs = self.env['procurement.order'].search([('move_dest_id', '=', move.id)])
        procs.run()

    def test_10_scrap_resupply_chained(self):
        """Test that chained moves generate a new procurement order."""
        self.product_a1232.route_ids = [(4, self.ref("stock_scrap_resupply.test_route"))]
        move = self.env['stock.move'].create({
            'name': "Test SCrap resupply",
            'product_id': self.product_a1232.id,
            'product_uom': self.uom_unit_id,
            'product_uom_qty': 5,
            'location_id': self.location_1.id,
            'location_dest_id': self.location_2.id,
            'picking_type_id': self.picking_type_id,
            'procure_method': 'make_to_order'
        })
        move.action_confirm()
        self.run_procs(move)
        self.assertTrue(len(move.move_orig_ids), 1)
        move_orig = move.move_orig_ids[0]
        self.assertTrue(move_orig.procurement_id)
        self.assertEqual(move.product_uom_qty, 5)
        move_orig.action_done()
        self.assertEqual(move_orig.state, 'done')
        move.action_assign()
        self.assertEqual(move.state, 'assigned')
        move.action_scrap(1, self.ref('stock.stock_location_scrapped'))
        move.action_assign()
        self.assertEqual(move.state, 'waiting')
        self.run_procs(move)
        self.assertEqual(len(move.move_orig_ids), 2)
        move_resupply = move.move_orig_ids.filtered(lambda m: m.state != 'done')
        self.assertTrue(move_resupply.procurement_id)
        self.assertEqual(move_resupply.product_uom_qty, 1)
        move_resupply.action_assign()
        move_resupply.action_done()
        move.action_assign()
        self.assertEqual(move.state, 'assigned')

    def test_20_scrap_no_resuppply(self):
        """Test that done, cancelled and make-to-stock moves don't generate any resupply."""
        # Check for done move
        self.product_a1232.route_ids = [(4, self.ref("stock_scrap_resupply.test_route"))]
        move = self.env['stock.move'].create({
            'name': "Test SCrap resupply",
            'product_id': self.product_a1232.id,
            'product_uom': self.uom_unit_id,
            'product_uom_qty': 5,
            'location_id': self.location_1.id,
            'location_dest_id': self.location_2.id,
            'picking_type_id': self.picking_type_id,
            'procure_method': 'make_to_order'
        })
        move.action_confirm()
        self.run_procs(move)
        self.assertTrue(move.move_orig_ids)
        move.move_orig_ids.action_done()
        move.action_assign()
        self.assertEqual(move.state, 'assigned')
        move.action_done()
        self.assertEqual(move.state, 'done')
        move.action_scrap(2, self.ref('stock.stock_location_scrapped'))
        self.run_procs(move)
        self.assertEqual(len(move.move_orig_ids), 1)
        self.assertEqual(move.move_orig_ids[0].state, 'done')
        # Check for cancelled move
        self.product_a1232.route_ids = [(4, self.ref("stock_scrap_resupply.test_route"))]
        move = self.env['stock.move'].create({
            'name': "Test SCrap resupply",
            'product_id': self.product_a1232.id,
            'product_uom': self.uom_unit_id,
            'product_uom_qty': 5,
            'location_id': self.location_1.id,
            'location_dest_id': self.location_2.id,
            'picking_type_id': self.picking_type_id,
            'procure_method': 'make_to_order'
        })
        move.action_confirm()
        self.run_procs(move)
        self.assertTrue(move.move_orig_ids)
        move.move_orig_ids.action_done()
        move.action_assign()
        self.assertEqual(move.state, 'assigned')
        move.action_cancel()
        self.assertEqual(move.state, 'cancel')
        move.action_scrap(2, self.ref('stock.stock_location_scrapped'))
        self.run_procs(move)
        self.assertEqual(len(move.move_orig_ids), 1)
        self.assertEqual(move.move_orig_ids[0].state, 'done')
        # Check for make-to-stock move
        self.product_a1232.route_ids = [(4, self.ref("stock_scrap_resupply.test_route"))]
        move = self.env['stock.move'].create({
            'name': "Test SCrap resupply",
            'product_id': self.product_a1232.id,
            'product_uom': self.uom_unit_id,
            'product_uom_qty': 5,
            'location_id': self.location_shelf.id,
            'location_dest_id': self.location_2.id,
            'picking_type_id': self.picking_type_id,
            'procure_method': 'make_to_stock'
        })
        move.action_confirm()
        self.run_procs(move)
        self.assertFalse(move.move_orig_ids)
        move.action_assign()
        self.assertEqual(move.state, 'assigned')
        move.action_scrap(1, self.ref('stock.stock_location_scrapped'))
        self.run_procs(move)
        self.assertFalse(move.move_orig_ids)
